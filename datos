using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using backendCreo.Models;
using backendCreo.Logic;
using backendCreo.AdditionalModels;
using System.IdentityModel.Tokens.Jwt;
using Microsoft.IdentityModel.Tokens;
using System.Security.Claims;
using static backendCreo.Token;
using Microsoft.Extensions.Configuration;
using Microsoft.AspNetCore.Authorization;

namespace backendCreo.Controllers
{
    [Route("api/[controller]")]
    [ApiController]
    public class EstandaresController : ControllerBase
    {
        private readonly CreoContext _context;

        HelperToken helper;

        public EstandaresController(CreoContext context, IConfiguration configuration)
        {
            _context = context;
            this.helper = new HelperToken(configuration);
          
        }

        // GET: api/Usuarios

        [HttpGet]
        [Authorize]
        public async Task<ActionResult<IEnumerable<Estandares>>> GetEstandares()
        {
            return await _context.Estandares.ToListAsync();
        }

        // GET: api/Estandares/5
        [HttpGet("{id}")]
        public async Task<ActionResult<Estandares>> GetEstandares(int id)
        {
            var estandares = await _context.Estandares.FindAsync(id);

            if (estandares == null)
            {
                return NotFound();
            }

            return estandares;
        }

        // POST: api/Estandares
        // To protect from overposting attacks, enable the specific properties you want to bind to, for
        // more details, see https://go.microsoft.com/fwlink/?linkid=2123754.
        [HttpPost("[action]")]
        public async Task<dynamic> PostEstandar(Estandares Estandar_o)
        {
            //var pass = SecurityLogic.GetMD5Password(usuario.Pass);

            Estandares newEstandar = new Estandares();

            newEstandar.NombreEstandar = Estandar_o.NombreEstandar;

            _context.Estandares.Add(newEstandar);
            await _context.SaveChangesAsync();

            return newEstandar;
        }

        // DELETE: api/Estandares/5
        [HttpDelete("{id}")]
        public async Task<ActionResult<Estandares>> DeleteEstandar(int id)
        {
            var estandar = await _context.Estandares.FindAsync(id);
            if (estandar == null)
            {
                return NotFound();
            }

            _context.Estandares.Remove(estandar);
            await _context.SaveChangesAsync();

            return estandar;
        }

        private bool EstandarExists(int id)
        {
            return _context.Estandares.Any(e => e.Estandar == id);
        }        
               
    }
}
